using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class NotificationPanel : SingletonMonoBehaviour
{
	public abstract class Settings
	{
		public GameObject PrefabToAddToNotifyPanel { get; set; }

		public float RestTime { get; set; }

		public bool DismissOnRoomTransition { get; set; }

		public bool CanBeEnqueued { get; set; }

		public bool SuppressPreviouslyQueued { get; set; }

		public float VerticalOffset { get; set; }

		public virtual SoundEventData DisplaySound
		{
			get
			{
				return null;
			}
		}

		public abstract GameObject CreateInstanceForDisplay();

		public abstract void DestroyInstance();

		public abstract void SetHidden(bool isHidden);
	}

	public Transform panelAttachPoint;

	public SoundEventData notificationSound;

	public ParticleSystem particles;

	public TimedSlider slider;

	private Settings _currentNotificationSettings;

	private GameObject _attachedPrefabInstance;

	private Queue<Settings> _pendingMessages = new Queue<Settings>();

	public static NotificationPanel Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<NotificationPanel>();
		}
	}

	private void OnEnable()
	{
		LevelManager.MovingToNextRoom += HandleLevelManagerMovingToNextRoom;
		GameManager.PauseChanged += HandlePausedChanged;
		PowerupCutscene.Completed += HandlePowerupCutsceneCompleted;
		TimedSlider.SlideInOutComplete += HandleSlideInOutComplete;
		TimedSlider.SlideOutBegin += HandleTimedSliderSlideOutBegin;
	}

	private void OnDisable()
	{
		LevelManager.MovingToNextRoom -= HandleLevelManagerMovingToNextRoom;
		GameManager.PauseChanged -= HandlePausedChanged;
		PowerupCutscene.Completed -= HandlePowerupCutsceneCompleted;
		TimedSlider.SlideInOutComplete -= HandleSlideInOutComplete;
		TimedSlider.SlideOutBegin -= HandleTimedSliderSlideOutBegin;
	}

	private void HandleTimedSliderSlideOutBegin(object sender, CancellableEventArgs e)
	{
		if (sender == slider && _pendingMessages.Any())
		{
			Settings settings = _pendingMessages.Peek();
			if (settings.GetType().Equals(_currentNotificationSettings.GetType()))
			{
				e.Cancel();
				ShowNotification(_pendingMessages.Dequeue());
			}
		}
	}

	private void HandleSlideInOutComplete(object sender, EventArgs args)
	{
		if (sender == slider && _pendingMessages.Any())
		{
			ShowNotification(_pendingMessages.Dequeue());
		}
	}

	private void HandlePausedChanged(object sender, PauseChangeEventArgs args)
	{
		bool flag = !GameManager.Instance.IsPauseReasonInStack(PauseReason.System);
		if (_currentNotificationSettings != null)
		{
			_currentNotificationSettings.SetHidden(!flag);
		}
		if (_attachedPrefabInstance != null)
		{
			Renderer[] componentsInChildren = _attachedPrefabInstance.GetComponentsInChildren<Renderer>();
			Renderer[] array = componentsInChildren;
			foreach (Renderer renderer in array)
			{
				renderer.enabled = flag;
			}
		}
	}

	private void HandlePowerupCutsceneCompleted(object sender, EventArgs args)
	{
		slider.SlideOutImmediate();
	}

	private void ShowNotification(Settings newPanelSettings)
	{
		if (_attachedPrefabInstance != null)
		{
			UnityEngine.Object.Destroy(_attachedPrefabInstance);
		}
		if (_currentNotificationSettings != null)
		{
			_currentNotificationSettings.DestroyInstance();
		}
		GameObject gameObject = newPanelSettings.CreateInstanceForDisplay();
		gameObject.transform.parent = panelAttachPoint;
		gameObject.transform.localPosition = Vector3.zero;
		if (newPanelSettings.PrefabToAddToNotifyPanel != null)
		{
			_attachedPrefabInstance = (GameObject)UnityEngine.Object.Instantiate(newPanelSettings.PrefabToAddToNotifyPanel);
			_attachedPrefabInstance.transform.parent = gameObject.transform;
			_attachedPrefabInstance.transform.localPosition = Vector3.zero;
		}
		SoundEventManager.Instance.Play2D(notificationSound);
		if (newPanelSettings.DisplaySound != null)
		{
			SoundEventManager.Instance.Play2D(newPanelSettings.DisplaySound);
		}
		if (newPanelSettings.RestTime > 0f)
		{
			slider.restTime = newPanelSettings.RestTime;
			slider.restForever = false;
		}
		else
		{
			slider.restTime = 0f;
			slider.restForever = true;
		}
		_currentNotificationSettings = newPanelSettings;
		slider.SlideIn(newPanelSettings.VerticalOffset);
	}

	private void HandleLevelManagerMovingToNextRoom(object sender, EventArgs e)
	{
		if ((_currentNotificationSettings == null || _currentNotificationSettings.DismissOnRoomTransition) && slider.IsCurrentlySliding)
		{
			slider.SlideOutAnimated();
		}
	}

	public void DisplayDismissOnRoomTransition(string message)
	{
		Display(StringNotificationPanelSettings.BuildDismissOnRoomTransition(message));
	}

	public void Display(Settings settings)
	{
		if (slider.IsCurrentlySliding && settings.CanBeEnqueued)
		{
			if (settings.SuppressPreviouslyQueued)
			{
				Queue<Settings> queue = new Queue<Settings>();
				while (_pendingMessages.Count != 0)
				{
					Settings settings2 = _pendingMessages.Dequeue();
					if (settings2.GetType() != settings.GetType())
					{
						queue.Enqueue(settings2);
					}
				}
				_pendingMessages = queue;
			}
			_pendingMessages.Enqueue(settings);
		}
		else
		{
			ShowNotification(settings);
		}
	}
}
