using System;
using System.Collections;
using UnityEngine;

public class ActivateFriendInviteWatcher : SingletonMonoBehaviour
{
	private const int MaxRetries = 10;

	public float friendInvitePollInterval = 120f;

	public uint friendInviteCount;

	public bool debugMode;

	public static ActivateFriendInviteWatcher Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<ActivateFriendInviteWatcher>();
		}
	}

	public static event EventHandler<FriendInviteCountEventArgs> FriendInviteCountUpdated;

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
	}

	private void Start()
	{
	}

	private void OnEnable()
	{
		ActivateWatcher.UserLoggedOff += HandleActivateWatcherUserLoggedOff;
	}

	private void HandleActivateWatcherUserLoggedOff(object sender, EventArgs e)
	{
		friendInviteCount = 0u;
		OnFriendInviteCountUpdated();
	}

	private void OnDisable()
	{
		ActivateWatcher.UserLoggedOff -= HandleActivateWatcherUserLoggedOff;
	}

	private IEnumerator TimerCoroutine()
	{
		while (true)
		{
			yield return new WaitForSeconds(1f);
		}
	}

	private void OnFriendInviteCountUpdated()
	{
		if (ActivateFriendInviteWatcher.FriendInviteCountUpdated != null)
		{
			ActivateFriendInviteWatcher.FriendInviteCountUpdated(this, new FriendInviteCountEventArgs(friendInviteCount));
		}
	}
}
