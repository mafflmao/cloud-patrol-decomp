using System;
using System.Collections;
using UnityEngine;

public class TransitionController : SingletonMonoBehaviour
{
	public enum Fade
	{
		IN = 0,
		OUT = 1
	}

	private const string CloudsIntroAnimationClipName = "Clouds_Intro";

	private const string CloudsLoopAnimationClipName = "Clouds_Loop";

	private const string CloudsOutroAnimationClipName = "Clouds_Outro";

	private const string ShipOutroAnimationClipName = "outro";

	public GameObject cloudTransition;

	private GameObject _cloudTransitionInstance;

	private GameObject ship;

	public GameObject bgTransition;

	public Color startColor;

	public Color endColor;

	public float fadeTime;

	public SoundEventData m_CloudSound;

	private GameObject leftPanel;

	private GameObject centerPanel;

	private GameObject footer;

	private GameObject header;

	private bool m_CanSkip;

	private float m_FlashFadeOutTime;

	public Camera uiHiddenCamera;

	public Camera uiVisibleCamera;

	public static TransitionController Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<TransitionController>();
		}
	}

	public static event EventHandler<EventArgs> GameOverTransitionComplete;

	private void ActivateCamera(bool uiVisible)
	{
		uiVisibleCamera.enabled = uiVisible;
		uiHiddenCamera.enabled = !uiVisible;
	}

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
	}

	public void StartTransitionFromFrontEnd()
	{
		LevelManager.BackgroundLoadComplete += HandleInitialRoomLoadComplete;
		StartTransition();
	}

	private void HandleInitialRoomLoadComplete(object sender, EventArgs args)
	{
		Debug.Log("Initial background load complete... Starting transition");
		LevelManager.BackgroundLoadComplete -= HandleInitialRoomLoadComplete;
		GameTransition();
	}

	private SoundEventData LoadShipIntroSfx()
	{
		return ResourceUtils.LoadResource<SoundEventData>("TransitionController/AMB_Ship_Intro_01");
	}

	private SoundEventData LoadShipIntroTutorialSfx()
	{
		return ResourceUtils.LoadResource<SoundEventData>("TransitionController/AMB_Ship_Intro_Tutorial");
	}

	private SoundEventData LoadShipOutroSfx()
	{
		return ResourceUtils.LoadResource<SoundEventData>("TransitionController/Ship_Outro_SFX_GameOver");
	}

	private SoundEventData LoadShipQuitSfx()
	{
		return ResourceUtils.LoadResource<SoundEventData>("TransitionController/Ship_Outro_SFX_EndVoyage");
	}

	private GameObject LoadAndInstantiateOutroShip()
	{
		GameObject original = ResourceUtils.LoadResource<GameObject>("TransitionController/ShipOutro");
		return (GameObject)UnityEngine.Object.Instantiate(original);
	}

	private GameObject LoadAndInstantiateIntroShip()
	{
		GameObject original = ResourceUtils.LoadResource<GameObject>("TransitionController/ShipIntro");
		return (GameObject)UnityEngine.Object.Instantiate(original);
	}

	private void ShipIntro()
	{
		GameObject gameObject = LoadAndInstantiateIntroShip();
		ShipIntroVisual componentInChildren = gameObject.GetComponentInChildren<ShipIntroVisual>();
		StartCoroutine(componentInChildren.SpawnInSequence());
		ShipIntroVisual.SkylanderSpawnComplete += StartTransition;
		SoundEventManager.Instance.PlayNoDestoryOnLoad(LoadShipIntroSfx());
	}

	private void StartTransition(object sender, EventArgs args)
	{
		ShipIntroVisual.SkylanderSpawnComplete -= StartTransition;
		StartTransition();
	}

	private void StartTransition()
	{
		SoundEventManager.Instance.Play2D(m_CloudSound);
		StartCoroutine(CloudTransition());
	}

	private IEnumerator CloudTransition()
	{
		m_CanSkip = false;
		_cloudTransitionInstance = UnityEngine.Object.Instantiate(cloudTransition) as GameObject;
		AnimationUtils.PlayClip(_cloudTransitionInstance.GetComponent<Animation>(), "Clouds_Intro");
		yield return new WaitForSeconds(_cloudTransitionInstance.GetComponent<Animation>()["Clouds_Intro"].length);
		AnimationUtils.PlayClip(_cloudTransitionInstance.GetComponent<Animation>(), "Clouds_Loop");
		FadeBackground(Fade.OUT);
		yield return new WaitForSeconds(2f);
		UnityEngine.Object.Destroy(_cloudTransitionInstance);
		GameManager.ResetData();
		if (UIManager.Exists())
		{
			UIManager.instance.blockInput = false;
		}
		LoadingPanel panel = LoadingPanel.InstanceAutoCreate;
		panel.timeBeforeDisplay = 0f;
		if (UpgradeSplashScreen.IsVisible)
		{
			panel.transform.localPosition += new Vector3(0f, -350f, 0f);
		}
		m_CanSkip = true;
		SpriteText text = panel.text;
		string trollText = panel.trollText;
		panel.shadowText.Text = trollText;
		text.Text = trollText;
		panel.loadingScreen.material = panel.m_FirstTutoMat;
		yield return new WaitForSeconds(2f);
		SpriteText text2 = panel.text;
		trollText = panel.bombText;
		panel.shadowText.Text = trollText;
		text2.Text = trollText;
		panel.loadingScreen.material = panel.m_SecondTutoMat;
		yield return new WaitForSeconds(1.5f);
		if (m_CanSkip)
		{
			m_CanSkip = false;
			Application.LoadLevel("MainScene");
		}
	}

	private void Update()
	{
		if (m_CanSkip && FingerGestures.InputFinger.IsDown)
		{
			StopCoroutine("CloudTransition");
			Application.LoadLevel("MainScene");
			m_CanSkip = false;
		}
	}

	private void ShipOutro()
	{
		if (!ship)
		{
			ship = LoadAndInstantiateOutroShip();
			ship.transform.localScale = new Vector3(0.4f, 0.4f, 0.4f);
			ship.transform.position = new Vector3(-2.4f, 10f, 6.2f);
			HideParticle componentInChildren = ship.GetComponentInChildren<HideParticle>();
			componentInChildren.enabled = false;
			Animation componentInChildren2 = ship.GetComponentInChildren<Animation>();
			AnimationUtils.PlayClip(componentInChildren2.gameObject.GetComponent<Animation>(), "outro");
			InvokeHelper.InvokeSafe(DestroyShip, 4.5f, this);
		}
	}

	private void DestroyShip()
	{
		if (ship != null)
		{
			UnityEngine.Object.Destroy(ship, 3f);
		}
	}

	public void GameOverTransition(bool showDamagedShip)
	{
		if (!_cloudTransitionInstance)
		{
			_cloudTransitionInstance = UnityEngine.Object.Instantiate(cloudTransition) as GameObject;
			AnimationUtils.PlayClip(_cloudTransitionInstance.GetComponent<Animation>(), "Clouds_Intro");
			InvokeHelper.InvokeSafe(PlayTransitionCloudOut, _cloudTransitionInstance.GetComponent<Animation>()["Clouds_Intro"].length, this);
		}
	}

	public void StartCloudTransition()
	{
		if ((bool)_cloudTransitionInstance)
		{
			UnityEngine.Object.Destroy(_cloudTransitionInstance);
		}
		SoundEventManager.Instance.Play2D(m_CloudSound);
		_cloudTransitionInstance = UnityEngine.Object.Instantiate(cloudTransition) as GameObject;
		AnimationUtils.PlayClip(_cloudTransitionInstance.GetComponent<Animation>(), "Clouds_Intro");
		InvokeHelper.InvokeSafe(PlayTransitionCloudOut, _cloudTransitionInstance.GetComponent<Animation>()["Clouds_Intro"].length, this);
	}

	private void PlayTransitionCloudOut()
	{
		AnimationUtils.PlayClip(_cloudTransitionInstance.GetComponent<Animation>(), "Clouds_Outro");
	}

	public void ResultsTransition(Action State, float transitionTime)
	{
		if ((bool)_cloudTransitionInstance)
		{
			AnimationUtils.PlayClip(_cloudTransitionInstance.GetComponent<Animation>(), "Clouds_Outro");
		}
	}

	public void ResetTransition()
	{
		Debug.Log("RESET TRANSITION");
		GameManager.gameState = GameManager.GameState.OutOfGame;
		LevelManager.BackgroundLoadComplete += HandleInitialRoomLoadComplete;
		FadeBackground(Fade.OUT);
		InvokeHelper.InvokeSafe(ResetGame, 1f, this);
	}

	public void StoreTransition()
	{
		Application.LoadLevel("StoreHub");
	}

	public void LevelTransition()
	{
	}

	public void CoinsTransition()
	{
		Application.LoadLevel("GemConverter");
	}

	public void GemsTransition()
	{
		Application.LoadLevel("GemStore");
	}

	private void ResetGame()
	{
		LoadingPanel instanceAutoCreate = LoadingPanel.InstanceAutoCreate;
		instanceAutoCreate.timeBeforeDisplay = 0f;
		instanceAutoCreate.DismissIfNotLoading = false;
		if (UIManager.Exists())
		{
			UIManager.instance.blockInput = false;
		}
		else
		{
			Debug.LogError("Found null UIManager - cannot restore input!");
		}
		GameManager.ResetGame(true);
	}

	public void GameTransition()
	{
		_cloudTransitionInstance = UnityEngine.Object.Instantiate(cloudTransition) as GameObject;
		AnimationUtils.PlayClip(_cloudTransitionInstance.GetComponent<Animation>(), "Clouds_Outro");
		UnityEngine.Object.Destroy(_cloudTransitionInstance, 1f);
		FadeBackground(Fade.IN);
	}

	private void FadeBackground(Fade transitionState, float i_Time = 1f)
	{
		ShowFader();
		if (transitionState == Fade.OUT)
		{
			bgTransition.GetComponent<Renderer>().material.SetColor("_Color", startColor);
			iTween.ColorTo(bgTransition, iTween.Hash("name", "_Color", "color", endColor, "time", i_Time, "includechildren", false));
		}
		else
		{
			bgTransition.GetComponent<Renderer>().material.SetColor("_Color", endColor);
			iTween.ColorTo(bgTransition, iTween.Hash("name", "_Color", "color", startColor, "time", i_Time, "includechildren", false, "oncomplete", "HideFader", "oncompletetarget", base.gameObject));
		}
	}

	public void Flash(float i_FadeInTime, float i_FadeOutTime)
	{
		FadeBackground(Fade.OUT, i_FadeInTime);
		InvokeHelper.InvokeSafe(FlashOut, i_FadeInTime, this);
		m_FlashFadeOutTime = i_FadeOutTime;
	}

	private void FlashOut()
	{
		FadeBackground(Fade.IN, m_FlashFadeOutTime);
	}

	private void HideFader()
	{
		bgTransition.GetComponent<Renderer>().enabled = false;
	}

	private void ShowFader()
	{
		bgTransition.GetComponent<Renderer>().enabled = true;
	}

	private void OnGameOverTransitionComplete()
	{
		if (TransitionController.GameOverTransitionComplete != null)
		{
			TransitionController.GameOverTransitionComplete(this, new EventArgs());
		}
	}
}
