using System;
using System.Collections;
using UnityEngine;

public class ActivateWatcher : SingletonMonoBehaviour
{
	private static readonly ILogger _log = LogBuilder.Instance.GetLogger(typeof(ActivateWatcher), LogLevel.Debug);

	public ChooseCloudSaveDialog chooseCloudSaveDialogPrefab;

	public MigrateSaveDialog migrateSaveDialogPrefab;

	public GemRefundDialog gemRefundDialogPrefab;

	public SoundEventData gemRewardGivenSound;

	private Bedrock.brUserConnectionStatus lastUserConnectionStatus;

	public bool isResolvingConflict;

	public bool isForcingReboot;

	private bool previouslyAnonymousWithImportantSaveData;

	private bool facebookAppNeedsReAuthentication;

	public static ActivateWatcher Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<ActivateWatcher>();
		}
	}

	public static event EventHandler<ConnectionStatusChangeEventArgs> ConnectionStatusChange;

	public static event EventHandler<LogOnEventArgs> UserLoggedOn;

	public static event EventHandler<EventArgs> UserLoggedOff;

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		lastUserConnectionStatus = Bedrock.brUserConnectionStatus.BR_LOGGED_OUT;
		isResolvingConflict = false;
		UnityEngine.Object.DontDestroyOnLoad(this);
	}

	private void OnEnable()
	{
		Bedrock.UserConnectionStatusChanged += HandleConnectionStatusChanged;
		Bedrock.UserVarCloudConflict += HandleUserVarCloudConflict;
		Bedrock.UserVarUserChanged += HandleUserVarUserChanged;
		Bedrock.UserVarUpdatedFromCloud += HandleUserVarUpdatedFromCloud;
		Bedrock.BedrockUIClosed += HandleActivateUIClosed;
		Bedrock.RemoteNotificationReceived += HandleBedrockRemoteNotificationReceived;
		Bedrock.FacebookNeedsAuthorization += HandleBedrockFacebookNeedsAuthorization;
	}

	private void OnDisable()
	{
		Bedrock.UserConnectionStatusChanged -= HandleConnectionStatusChanged;
		Bedrock.UserVarCloudConflict -= HandleUserVarCloudConflict;
		Bedrock.UserVarUserChanged -= HandleUserVarUserChanged;
		Bedrock.UserVarUpdatedFromCloud -= HandleUserVarUpdatedFromCloud;
		Bedrock.BedrockUIClosed -= HandleActivateUIClosed;
		Bedrock.RemoteNotificationReceived -= HandleBedrockRemoteNotificationReceived;
		Bedrock.FacebookNeedsAuthorization -= HandleBedrockFacebookNeedsAuthorization;
	}

	private void OnApplicationPause(bool pause)
	{
		if (!pause)
		{
			Bedrock.Reconnect();
		}
	}

	private void ShowNotification(string message)
	{
		NotificationPanel.Instance.Display(new ActivateNotificationPanelSettings(message, 2f));
	}

	private void HandleConnectionStatusChanged(object sender, EventArgs e)
	{
		_log.LogDebug("HandleConnectionStatusChanged(...)");
		Bedrock.brUserConnectionStatus userConnectionStatus = Bedrock.getUserConnectionStatus();
		_log.LogDebug("Connection status is now {0}", userConnectionStatus);
		if (userConnectionStatus != lastUserConnectionStatus)
		{
			_log.LogDebug("New ConnectionStatus ({0}) doesn't match last status ({1})", userConnectionStatus, lastUserConnectionStatus);
			if (ActivateWatcher.ConnectionStatusChange != null)
			{
				ActivateWatcher.ConnectionStatusChange(this, new ConnectionStatusChangeEventArgs(lastUserConnectionStatus, userConnectionStatus));
			}
			if ((lastUserConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_OFFLINE || lastUserConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_ONLINE) && userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGING_IN_REGISTERED)
			{
				OnUserLoggedOff();
			}
			else if ((lastUserConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_OFFLINE || lastUserConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE) && userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGING_IN_ANONYMOUSLY)
			{
				ShowNotification(LocalizationManager.Instance.GetString("ACTIVATE_NOTIFICATION_LOGGED_OFF"));
				OnUserLoggedOff();
			}
			if (userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_OFFLINE || userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE || userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_OFFLINE || userConnectionStatus == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_ANONYMOUSLY_ONLINE)
			{
				bool wasFirstLogonForUser = true;
				OnUserLoggedOn(Bedrock.isDeviceAnonymouslyLoggedOn(), wasFirstLogonForUser);
			}
		}
		lastUserConnectionStatus = userConnectionStatus;
	}

	private void HandleBedrockFacebookNeedsAuthorization(object sender, EventArgs args)
	{
		_log.LogDebug("HandleBedrockFacebookNeedsAuthorization()");
		facebookAppNeedsReAuthentication = true;
	}

	private void OnUserLoggedOn(bool isAnonymousLogin, bool wasFirstLogonForUser)
	{
		_log.LogDebug("OnUserLoggedOnOn({0}, {1})", isAnonymousLogin, wasFirstLogonForUser);
		if (!isAnonymousLogin)
		{
			if (wasFirstLogonForUser)
			{
				if (previouslyAnonymousWithImportantSaveData)
				{
					_log.Log("[HandleUserLoggedOn] User had important save data, showing migrate dialog ...");
					MigrateSaveDialog migrateSaveDialog = (MigrateSaveDialog)UnityEngine.Object.Instantiate(migrateSaveDialogPrefab);
					migrateSaveDialog.UserDismissed += HandleMigrateSaveDialogUserDismissed;
					migrateSaveDialog.Display();
				}
				else
				{
					_log.Log("[HandleUserLoggedOn] User did not have important save data, NOT showing migrate dialog ...");
					GiveFirstTimeReward();
				}
			}
			if (Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_OFFLINE)
			{
				ShowNotification(LocalizationManager.Instance.GetFormatString("ACTIVATE_OFFLINE_NOTIFICATION", Bedrock.getUsername()));
				if (LoadingPanel.InstanceNoAutocreate != null && !LoadingPanel.InstanceAutoCreate.DismissOnStateChange)
				{
					LoadingPanel.InstanceNoAutocreate.Dismiss();
				}
			}
			else if (Bedrock.getUserConnectionStatus() == Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE)
			{
				SoundEventManager.Instance.Play2D(SoundEventManager.Instance.activateLoginSound);
				ShowNotification(LocalizationManager.Instance.GetFormatString("ACTIVATE_ONLINE_NOTIFICATION", Bedrock.getUsername()));
			}
		}
		if (ActivateWatcher.UserLoggedOn != null)
		{
			ActivateWatcher.UserLoggedOn(this, new LogOnEventArgs(isAnonymousLogin, wasFirstLogonForUser));
		}
	}

	private void OnUserLoggedOff()
	{
		_log.LogDebug("HandleUserLoggedOff()");
		StartCoroutine(LogOffReboot());
		LoadingPanel instanceAutoCreate = LoadingPanel.InstanceAutoCreate;
		instanceAutoCreate.DismissIfNotLoading = true;
		instanceAutoCreate.timeBeforeDisplay = 0f;
		instanceAutoCreate.text.Text = LocalizationManager.Instance.GetString("ACTIVATE_PLEASE_WAIT");
		instanceAutoCreate.DismissOnStateChange = false;
		if (ActivateWatcher.UserLoggedOff != null)
		{
			ActivateWatcher.UserLoggedOff(this, new EventArgs());
		}
	}

	private void HandleMigrateSaveDialogUserDismissed(object sender, EventArgs e)
	{
		GiveFirstTimeReward();
	}

	private void GiveFirstTimeReward()
	{
		_log.Log("[HandlerUserLoggedOn] Giving first time reward with Bedrock.getUserConnectionStatus() = {0}", Bedrock.getUserConnectionStatus());
		GemRefundDialog gemRefundDialog = (GemRefundDialog)UnityEngine.Object.Instantiate(gemRefundDialogPrefab);
		int num = 20;
		gemRefundDialog.transitionInSfx = gemRewardGivenSound;
		gemRefundDialog.Display(LocalizationManager.Instance.GetFormatString("ACTIVATE_FIRST_LOGIN_THANKS_TEXT", num), LocalizationManager.Instance.GetString("ACTIVATE_FIRST_LOGIN_THANKS_TITLE"), null, null);
		GameManager.gemsCollectedInVoyage += num;
		SwrveEventsRewards.AwardGems(num, "StartingReward");
	}

	private IEnumerator LogOffReboot()
	{
		_log.LogDebug("LogOffReboot()");
		if (!(StateManager.Instance.CurrentStateName != "Title"))
		{
			yield break;
		}
		isResolvingConflict = false;
		isForcingReboot = true;
		if (!ElementOfTheDayChanger.AllowElementOfTheDayChanges)
		{
			if (GameManager.gameState == GameManager.GameState.OutOfGame)
			{
				_log.LogDebug("Out of game: Waiting for game to start...");
				while (GameManager.gameState == GameManager.GameState.OutOfGame)
				{
					yield return new WaitForEndOfFrame();
				}
				_log.LogDebug("Done waiting for game to start. Checking pause state.");
				if (GameManager.Instance.IsPaused)
				{
					_log.LogDebug("Game is paused. Popping pause state.");
					GameManager.Instance.PopPause(PauseReason.System);
				}
				_log.LogDebug("Showing game over screen.");
				GameManager.Instance.ShowGameOverScreen();
			}
			else if (GameManager.gameState == GameManager.GameState.Playing)
			{
				_log.LogDebug("In-game ({0}): Waiting for game to become paused....", GameManager.gameState);
				while (!GameManager.Instance.IsPaused)
				{
					yield return new WaitForEndOfFrame();
				}
				_log.LogDebug("Done waiting for game to become paused. Popping pause reason.");
				GameManager.Instance.PopPause(PauseReason.System);
				_log.LogDebug("Showing game over screen.");
				GameManager.Instance.ShowGameOverScreen();
			}
		}
		else
		{
			StateManager.Instance.LoadAndActivateState("Title");
		}
	}

	public void ClearUserCache()
	{
	}

	private void HandleUserVarCloudConflict(object sender, EventArgs e)
	{
		if (!isResolvingConflict)
		{
			isResolvingConflict = true;
			StartCoroutine(ResolvingConflict());
		}
	}

	private IEnumerator ResolvingConflict()
	{
		_log.Log("Begin Resolving Cloud Conflicts");
		while (!ElementOfTheDayChanger.AllowElementOfTheDayChanges || Bedrock.getUserConnectionStatus() != Bedrock.brUserConnectionStatus.BR_LOGGED_IN_REGISTERED_ONLINE)
		{
			yield return new WaitForEndOfFrame();
		}
		Bedrock.CloudConflictInfo cloudConflictInfo = Bedrock.GetUserCacheVariablesCloudConflictInfo();
		_log.Log("Cloud Storage Conflict: " + cloudConflictInfo.fileConflictStatus);
		if (Bedrock.isDeviceAnonymouslyLoggedOn() || cloudConflictInfo.fileConflictStatus == Bedrock.brCloudStorageFileConflictStatus.BR_CLOUDSTORAGE_FILECONFLICT_ONLY_EXISTS_ON_LOCAL)
		{
			isResolvingConflict = false;
			LinkedContentManager.Instance.TryUpdateContentAndDisplayNotification();
		}
		else if (cloudConflictInfo.fileConflictStatus == Bedrock.brCloudStorageFileConflictStatus.BR_CLOUDSTORAGE_FILECONFLICT_ONLY_EXISTS_ON_CLOUD)
		{
			_log.LogDebug("Conflict status is {0} - pulling automatically.", cloudConflictInfo.fileConflictStatus);
			PullFromTheCloud();
		}
	}

	private void HandleUserVarUserChanged(object sender, EventArgs e)
	{
		_log.LogDebug("HandleUserVarUserChanged");
		UserVarUpdatedFromCloud();
	}

	private void HandleUserVarUpdatedFromCloud(object sender, EventArgs e)
	{
		_log.LogDebug("HandleUserVarUpdatedFromCloud");
		UserVarUpdatedFromCloud();
		LinkedContentManager.Instance.TryUpdateContentAndDisplayNotification();
	}

	private void UserVarUpdatedFromCloud()
	{
		_log.LogDebug("UserVarUpdatedFromCloud()");
		ClearUserCache();
		if (LoadingPanel.InstanceNoAutocreate != null && !LoadingPanel.InstanceAutoCreate.DismissOnStateChange)
		{
			LoadingPanel.InstanceNoAutocreate.Dismiss();
		}
	}

	private void HandleBedrockRemoteNotificationReceived(object sender, Bedrock.RemoteNotificationEventArgs e)
	{
		_log.LogDebug("HandleBedrockRemoteNotificationReceived(...)");
		NotificationPanel.Instance.Display(new ActivateNotificationPanelSettings(e._message, 4f));
	}

	public void PullFromTheCloud()
	{
		_log.LogDebug("PullFromTheCloud()");
		if (Bedrock.ResolveUserCacheVariablesWithCloud(false))
		{
			_log.LogDebug("Successfully started cloud pull. Displaying UI.");
			LoadingPanel instanceAutoCreate = LoadingPanel.InstanceAutoCreate;
			instanceAutoCreate.DismissIfNotLoading = false;
			instanceAutoCreate.timeBeforeDisplay = 0f;
			instanceAutoCreate.text.Text = LocalizationManager.Instance.GetFormatString("ACTIVATE_SYNCING");
			instanceAutoCreate.DismissOnStateChange = false;
			if (StateManager.Instance.CurrentStateName != "Title")
			{
				_log.LogDebug("Current state is '{0}', switching to 'Title' state.", StateManager.Instance.CurrentStateName);
				StateManager.Instance.LoadAndActivateState("Title");
			}
			else
			{
				_log.LogDebug("Already on title. No need to switch states.");
			}
		}
		else
		{
			_log.LogError("ResolveUserCacheVariablesWithCloud returned failed to start");
		}
		isResolvingConflict = false;
	}

	private void HandleActivateUIClosed(object sender, Bedrock.brUserInterfaceReasonForCloseEventArgs e)
	{
		_log.LogDebug("HandleActivateUIClosed ({0})", e.Reason);
		ResumeGameAfterActivateUIClosed();
	}

	private void ResumeGameAfterActivateUIClosed()
	{
		_log.LogDebug("ResumeGameAfterActivateUIClosed()");
		if (GameManager.gameState != GameManager.GameState.Playing)
		{
			Application.targetFrameRate = 60;
			Time.timeScale = 1f;
			UIManager.instance.blockInput = false;
		}
	}

	public void ShowActivateUI(Bedrock.brUserInterfaceScreen userInterface)
	{
		_log.LogDebug("ShowActivateUI({0})", userInterface);
		if (Application.isEditor)
		{
			_log.Log("ShowActivateUI called, but not doing anything because we're in the editor.");
			return;
		}
		if (GameManager.gameState != GameManager.GameState.Playing)
		{
			Time.timeScale = 0f;
			Application.targetFrameRate = 15;
			UIManager.instance.blockInput = true;
		}
		if (!Bedrock.displayUserInterface(userInterface))
		{
			_log.LogError("Failed to show user interface '{0}'.", userInterface);
			ResumeGameAfterActivateUIClosed();
		}
		else
		{
			_log.Log("Opened UI '{0}' successfully.", userInterface);
		}
	}

	public void ReclaimMemoryThenLaunchActivate(bool launchReauthorizePageIfNeeded)
	{
		StartCoroutine(ReclaimMemoryThenLaunchActivate_Internal(launchReauthorizePageIfNeeded));
	}

	private IEnumerator ReclaimMemoryThenLaunchActivate_Internal(bool launchReauthorizePageIfNeeded)
	{
		_log.LogDebug("ReclaimMemoryThenLaunchActivate_Internal({0})", launchReauthorizePageIfNeeded);
		_log.LogDebug("Unloading unused Unity Assets...");
		yield return Resources.UnloadUnusedAssets();
		_log.LogDebug("Collecting Garabge...");
		GC.Collect();
		Bedrock.brUserInterfaceScreen interfaceScreen = Bedrock.brUserInterfaceScreen.BR_LOG_ON_UI;
		if (facebookAppNeedsReAuthentication && launchReauthorizePageIfNeeded)
		{
			_log.LogDebug("Facebook app needs re-authorization. Launching into authorization screen instead of normal screen.");
			facebookAppNeedsReAuthentication = false;
			interfaceScreen = Bedrock.brUserInterfaceScreen.BR_UI_FACEBOOK_REAUTH;
		}
		if (Application.isEditor)
		{
			_log.LogWarning("Not launching activate since we're in the editor. Would normally be '{0}' screen.", interfaceScreen);
		}
		else
		{
			_log.Log("Launching activate to '{0}' screen.", interfaceScreen);
			Instance.ShowActivateUI(interfaceScreen);
		}
	}
}
