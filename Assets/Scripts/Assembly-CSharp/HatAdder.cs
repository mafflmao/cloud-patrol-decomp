using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class HatAdder : SingletonMonoBehaviour
{
	public float hatSpawnChance = 0.3f;

	private static int _hatRequestCount;

	public static HatAdder Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<HatAdder>();
		}
	}

	private void Start()
	{
		hatSpawnChance = Bedrock.GetRemoteVariableAsFloat("HatSpawnFrequency", hatSpawnChance);
	}

	private void OnEnable()
	{
		LevelManager.MovingToNextRoom += HandleLevelManagerMovingToNextRoom;
	}

	private void OnDisable()
	{
		LevelManager.MovingToNextRoom -= HandleLevelManagerMovingToNextRoom;
	}

	public static void PushHatRequest()
	{
		_hatRequestCount++;
	}

	public static void PopHatRequest()
	{
		_hatRequestCount--;
		if (_hatRequestCount < 0)
		{
			Debug.LogError("Mismatch between Push/Pop hat request! Someone popped too many times!");
			_hatRequestCount = 0;
		}
	}

	private void HandleLevelManagerMovingToNextRoom(object sender, LevelManager.NextRoomEventArgs e)
	{
		if (_hatRequestCount > 0)
		{
			AddHatsToEnemiesInCurrentRoom(e.RoomRoot);
		}
	}

	private void AddHatsToEnemiesInCurrentRoom(ScreenRootNodeData roomRoot)
	{
		if (!LevelManager.Instance.FinishedTutorials)
		{
			return;
		}
		List<GameObject> list = new List<GameObject>();
		foreach (GameObject enemy in EnemyUtils.GetEnemies(roomRoot.gameObject))
		{
			if (Random.value <= hatSpawnChance)
			{
				list.Add(enemy);
			}
		}
		if (list.Any())
		{
			AddHats(list, BountyChooser.Instance.hatPrefab);
		}
	}

	private static void AddHats(IEnumerable<GameObject> enemyRootNodes, GameObject hatPrefab)
	{
		foreach (GameObject enemyRootNode in enemyRootNodes)
		{
			AddHat(enemyRootNode, hatPrefab);
		}
	}

	private static void AddHat(GameObject enemyGameObject, GameObject hatPrefab)
	{
		Transform transform = TransformUtil.FindRecursive(enemyGameObject.transform, "VisualParent");
		GameObject gameObject = (GameObject)Object.Instantiate(hatPrefab, transform.position, transform.rotation);
		Accessory accessory = enemyGameObject.gameObject.AddComponent<Accessory>();
		accessory.accessory = gameObject.transform;
		accessory.accessoryBone = "bHead";
		accessory.accessoryOffset = new Vector3(-0.15f, 0f, 0f);
	}

	public static bool IsHat(Health health)
	{
		return health.gameObject.GetComponent<Hat>() != null;
	}
}
