using System;
using UnityEngine;

public class CharacterUpgradeManager : SingletonMonoBehaviour
{
	public static CharacterUpgradeManager Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<CharacterUpgradeManager>();
		}
	}

	private CharacterUpgradeData EnabledPassiveUpgrade
	{
		get
		{
			CharacterData activeSkylander = StartGameSettings.Instance.activeSkylander;
			CharacterUpgradeData passiveUpgrade = activeSkylander.passiveUpgrade;
			if (passiveUpgrade.AllRequirementsMet)
			{
				return passiveUpgrade;
			}
			return null;
		}
	}

	protected override void AwakeOnce()
	{
		InitDataForActiveCharacter();
	}

	private void Start()
	{
		UnityEngine.Object.DontDestroyOnLoad(this);
	}

	private void OnEnable()
	{
		StartGameSettings.ActiveSkylanderChanged += HandleStartGameSettingsActiveSkylanderChanged;
		UpgradeRequirement.RecheckRequirements += HandleUpgradeRequirementRecheckRequirements;
	}

	private void OnDisable()
	{
		StartGameSettings.ActiveSkylanderChanged -= HandleStartGameSettingsActiveSkylanderChanged;
		UpgradeRequirement.RecheckRequirements -= HandleUpgradeRequirementRecheckRequirements;
	}

	private void HandleUpgradeUnlocked(object sender, EventArgs e)
	{
		RecheckActiveSkylanderRequirements();
	}

	private void HandleUpgradeRequirementRecheckRequirements(object sender, EventArgs e)
	{
		RecheckActiveSkylanderRequirements();
	}

	private void RecheckActiveSkylanderRequirements()
	{
		Debug.Log("Re-checking upgrade requirements");
		CharacterUpgradeData passiveUpgrade = StartGameSettings.Instance.activeSkylander.passiveUpgrade;
		if (passiveUpgrade.UpgradeInstance == null)
		{
			if (passiveUpgrade.AllRequirementsMet)
			{
				passiveUpgrade.CreateUpgradeInstance();
			}
			else
			{
				Debug.Log("Requirements for upgrade not met.");
			}
		}
		else
		{
			Debug.Log("Upgrade already initialized.");
		}
	}

	private void HandleStartGameSettingsActiveSkylanderChanged(object sender, SkylanderChangeEventArgs e)
	{
		if (e.OldCharacter != null)
		{
			CharacterUpgradeData passiveUpgrade = e.OldCharacter.passiveUpgrade;
			passiveUpgrade.DestroyAndReleaseUpgradeInstance();
			passiveUpgrade.DestroyRequirementInstance();
		}
		InitDataForActiveCharacter();
	}

	private void InitDataForActiveCharacter()
	{
	}

	public T GetPassiveUpgradeOrDefault<T>() where T : CharacterUpgrade
	{
		CharacterUpgradeData enabledPassiveUpgrade = EnabledPassiveUpgrade;
		if (enabledPassiveUpgrade != null && enabledPassiveUpgrade.UpgradeInstance != null && enabledPassiveUpgrade.UpgradeInstance is T)
		{
			return (T)enabledPassiveUpgrade.UpgradeInstance;
		}
		return (T)null;
	}
}
