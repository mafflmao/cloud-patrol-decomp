using System;
using UnityEngine;

public class MakeGoodManager : SingletonMonoBehaviour
{
	private enum RewardTypes
	{
		Gems = 0,
		Coins = 1
	}

	private static ILogger _log = LogBuilder.Instance.GetLogger(typeof(MakeGoodManager), LogLevel.Debug);

	public static MakeGoodManager Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<MakeGoodManager>();
		}
	}

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		UnityEngine.Object.DontDestroyOnLoad(this);
	}

	private void OnEnable()
	{
		Bedrock.MakeGoodRewardAvailable += HandleBedrockMakeGoodRewardAvailable;
	}

	private void OnDisable()
	{
		Bedrock.MakeGoodRewardAvailable -= HandleBedrockMakeGoodRewardAvailable;
	}

	private void HandleBedrockMakeGoodRewardAvailable(object sender, EventArgs e)
	{
		_log.LogDebug("HandleBedrockMakeGoodRewardAvailable");
		CheckForMakeGoodReward();
	}

	public void CheckForMakeGoodReward()
	{
		_log.LogDebug("CheckForMakeGoodReward()");
		Bedrock.MakeGoodRewardInfo reward;
		if (Bedrock.GetMakeGoodReward(out reward) && reward.Value != 0)
		{
			_log.Log("Found reward for user: {0}", reward);
			if (Bedrock.ClearMakeGoodReward())
			{
				_log.LogDebug("Successfully cleared pending reward state.");
				if (reward.RewardType == 0)
				{
					_log.LogDebug("Giving {0} Gem(s).", reward.Value);
					string formatString = LocalizationManager.Instance.GetFormatString("MAKE_GOOD_REWARD_GEMS", reward.Value);
					NotificationPanel.Instance.Display(new PurchaseNotificationPanelSettings(formatString));
				}
				else
				{
					_log.LogDebug("Giving {0} Coin(s).", reward.Value);
					string formatString2 = LocalizationManager.Instance.GetFormatString("MAKE_GOOD_REWARD_COINS", reward.Value);
					NotificationPanel.Instance.Display(new PurchaseNotificationPanelSettings(formatString2));
				}
			}
			else
			{
				_log.LogError("Failed to clear pending log reward for user.");
			}
		}
		else
		{
			_log.LogDebug("No reward found for user.");
		}
	}
}
