using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BalloonSpawner : SingletonMonoBehaviour
{
	private static readonly ILogger _log = LogBuilder.Instance.GetLogger(typeof(BalloonSpawner), LogLevel.Log);

	public float minTimeBetweenRequestedSpawns = 1.5f;

	public float maxTimeBetweenRequestedSpawns = 6f;

	public float minTimeBetweenSuddenSpawns = 18f;

	public float maxTimeBetweenSuddenSpawns = 36f;

	public float xOffsetRandomness = 1.25f;

	public int balloonLifetime = 6;

	public GameObject prefabToSpawn;

	private int _spawnedBalloons;

	public int balloonsToSpawnForBounty = 5;

	private static int _balloonsRequestCount = 0;

	private static HashSet<string> _balloonsRequestKeys = new HashSet<string>();

	public static BalloonSpawner Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<BalloonSpawner>();
		}
	}

	private void OnEnable()
	{
		GameManager.GameOver += HandleGameManagerGameOver;
		LevelManager.ArrivedAtNextRoom += HandleLevelManagerArrivedAtNextRoom;
	}

	private void OnDisable()
	{
		GameManager.GameOver -= HandleGameManagerGameOver;
		LevelManager.ArrivedAtNextRoom -= HandleLevelManagerArrivedAtNextRoom;
	}

	public static void PushBalloonsRequest(string key)
	{
		string item = key.ToLower();
		if (_balloonsRequestKeys.Contains(item))
		{
			_log.LogError("[PushBalloonsRequest] Request with key '" + key + "' already exists! Not pushing twice, ignored ...");
			return;
		}
		_balloonsRequestCount++;
		_balloonsRequestKeys.Add(item);
	}

	public static void PopBalloonsRequest(string key)
	{
		string item = key.ToLower();
		if (_balloonsRequestKeys.Contains(item))
		{
			_balloonsRequestCount--;
			_balloonsRequestKeys.Remove(item);
		}
		else
		{
			_log.LogError("[PopBalloonsRequest] Request with key '" + key + "' did not exist! Not popping twice, ignored ...");
		}
	}

	private void HandleLevelManagerArrivedAtNextRoom(object sender, LevelManager.NextRoomEventArgs e)
	{
		if (LevelManager.Instance.FinishedTutorials)
		{
			int num = 0;
			if (_balloonsRequestCount != 0)
			{
				num = Math.Max(num, balloonsToSpawnForBounty);
			}
			_log.LogDebug("ARRIVED at next room, spawning " + num + " balloons");
			SpawnBalloons(num);
		}
	}

	public void SpawnBalloons(int numberToSpawn)
	{
		StopSpawning();
	}

	private IEnumerator SpawnerCoroutine(int numberOfBalloonsToSpawn)
	{
		_spawnedBalloons = 0;
		while (true)
		{
			float minSpawnTime = minTimeBetweenSuddenSpawns;
			float maxSpawnTime = maxTimeBetweenSuddenSpawns;
			if (_spawnedBalloons < numberOfBalloonsToSpawn)
			{
				minSpawnTime = minTimeBetweenRequestedSpawns;
				maxSpawnTime = maxTimeBetweenRequestedSpawns;
			}
			float timeToWait = UnityEngine.Random.Range(minSpawnTime, maxSpawnTime);
			yield return new WaitForSeconds(timeToWait);
			GameObject instance = CreateBalloonInstance();
			_spawnedBalloons++;
			UnityEngine.Object.Destroy(instance, balloonLifetime);
		}
	}

	private void StopSpawning()
	{
		StopAllCoroutines();
	}

	private GameObject CreateBalloonInstance()
	{
		Vector3 position = new Vector3(base.transform.position.x + UnityEngine.Random.Range(0f - xOffsetRandomness, xOffsetRandomness), base.transform.position.y, base.transform.position.z);
		GameObject gameObject = prefabToSpawn;
		SpawnerChangeUpgrade passiveUpgradeOrDefault = CharacterUpgradeManager.Instance.GetPassiveUpgradeOrDefault<SpawnerChangeUpgrade>();
		if (passiveUpgradeOrDefault != null)
		{
			gameObject = passiveUpgradeOrDefault.ReplaceIfNecessary(gameObject.transform).gameObject;
		}
		return (GameObject)UnityEngine.Object.Instantiate(gameObject, position, Quaternion.identity);
	}

	private void HandleGameManagerGameOver(object sender, EventArgs e)
	{
		StopSpawning();
	}

	private void OnDrawGizmos()
	{
		Vector3 vector = new Vector3(xOffsetRandomness, 0f, 0f);
		Gizmos.DrawLine(base.transform.position - vector, base.transform.position + vector);
	}
}
