using System;
using UnityEngine;

public class LoadingPanel : SingletonMonoBehaviour
{
	public bool DismissIfNotLoading = true;

	public bool DismissOnStateChange = true;

	public SpriteText text;

	public SpriteText shadowText;

	public string trollText;

	public string bombText;

	public float timeBeforeDisplay = 1f;

	public Renderer[] renderers;

	public MeshRenderer loadingScreen;

	public Material m_FirstTutoMat;

	public Material m_SecondTutoMat;

	private float _awakeTime;

	public static LoadingPanel InstanceNoAutocreate
	{
		get
		{
			return SingletonMonoBehaviour.GetSingletonInstance<LoadingPanel>();
		}
	}

	public static LoadingPanel InstanceAutoCreate
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<LoadingPanel>();
		}
	}

	public static event EventHandler<EventArgs> PanelDisplayed;

	public static event EventHandler<EventArgs> PanelDismissed;

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		_awakeTime = Time.realtimeSinceStartup;
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
	}

	private void Start()
	{
		renderers = GetComponentsInChildren<Renderer>();
		if (timeBeforeDisplay > 0f)
		{
			Renderer[] array = renderers;
			foreach (Renderer renderer in array)
			{
				renderer.enabled = false;
			}
		}
	}

	private void OnEnable()
	{
		GameManager.GameManagerLoaded += GameManagerLoaded;
	}

	private void OnDisable()
	{
		GameManager.GameManagerLoaded -= GameManagerLoaded;
	}

	private void Update()
	{
		if (_awakeTime + timeBeforeDisplay < Time.realtimeSinceStartup)
		{
			Renderer[] array = renderers;
			foreach (Renderer renderer in array)
			{
				renderer.enabled = true;
			}
			OnLoadingPanelDisplayed();
		}
		if (DismissIfNotLoading && StateManager.Instance != null && !StateManager.Instance.Loading)
		{
			Dismiss();
		}
	}

	private void GameManagerLoaded(object sender, EventArgs args)
	{
		Dismiss();
	}

	public void Dismiss()
	{
		OnPanelDismissed();
		UnityEngine.Object.Destroy(base.gameObject);
	}

	public void OnLoadingPanelDisplayed()
	{
		if (LoadingPanel.PanelDisplayed != null)
		{
			LoadingPanel.PanelDisplayed(this, new EventArgs());
		}
	}

	public void OnPanelDismissed()
	{
		if (LoadingPanel.PanelDismissed != null)
		{
			LoadingPanel.PanelDismissed(this, new EventArgs());
		}
	}
}
