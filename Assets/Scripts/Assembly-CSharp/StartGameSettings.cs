using System;
using UnityEngine;

public class StartGameSettings : SingletonMonoBehaviour
{
	public const float VERSION = 1.8f;

	[SerializeField]
	private CharacterData _activeSkylander;

	[SerializeField]
	private CharacterDataList _characterDataList;

	[SerializeField]
	private CharacterData _defaultSkylander;

	public bool showMagicMoment;

	public bool showElementOfTheDayPopup;

	public string[] sceneOverrides;

	public PowerupData[] magicItemsToUnlockOnLoad;

	public static StartGameSettings Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<StartGameSettings>();
		}
	}

	public static bool InstanceExists
	{
		get
		{
			return SingletonMonoBehaviour.GetSingletonInstance<StartGameSettings>() != null;
		}
	}

	public bool IsBonusElementActive
	{
		get
		{
			return true;
		}
	}

	public bool hasCharacterData
	{
		get
		{
			return _activeSkylander != null;
		}
	}

	public CharacterData activeSkylander
	{
		get
		{
			if (_activeSkylander == null && _activeSkylander == null)
			{
				_activeSkylander = _defaultSkylander;
			}
			return _activeSkylander;
		}
		set
		{
			if (!(_activeSkylander != null) || !(_activeSkylander.name == value.name))
			{
				CharacterData oldCharacter = _activeSkylander;
				_activeSkylander = value;
				showMagicMoment = true;
				OnActiveSkylanderChanged(oldCharacter);
			}
		}
	}

	public CharacterDataList characterDataList
	{
		get
		{
			return _characterDataList;
		}
	}

	public static event EventHandler<SkylanderChangeEventArgs> ActiveSkylanderChanged;

	protected override void AwakeOnce()
	{
		base.AwakeOnce();
		UserChangeSetup();
		UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
	}

	private void UserChangeSetup()
	{
		showElementOfTheDayPopup = true;
		SwrveEconomy.UpdateAllFromSwrve();
		UnlockPowerups();
	}

	private void OnEnable()
	{
	}

	private void OnDisable()
	{
	}

	private void HandleStorageChanged(object sender, EventArgs e)
	{
		UserChangeSetup();
		CharacterData defaultSkylander = _defaultSkylander;
		if (defaultSkylander == null)
		{
			defaultSkylander = _defaultSkylander;
		}
		activeSkylander = defaultSkylander;
	}

	private void UnlockPowerups()
	{
	}

	protected void OnActiveSkylanderChanged(CharacterData oldCharacter)
	{
		if (StartGameSettings.ActiveSkylanderChanged != null)
		{
			StartGameSettings.ActiveSkylanderChanged(this, new SkylanderChangeEventArgs(oldCharacter));
		}
	}
}
