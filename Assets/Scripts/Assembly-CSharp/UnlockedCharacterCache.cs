using System;
using System.Collections.Generic;

public class UnlockedCharacterCache : SingletonMonoBehaviour
{
	private const string UnlockedCharacterStorageKey = "player.characterUnlocks";

	private Dictionary<string, KeyValuePair<int, CharacterUserData.ToyLink>> _unlockedCharacters = new Dictionary<string, KeyValuePair<int, CharacterUserData.ToyLink>>();

	private List<string> _orderedUnlockList = new List<string>();

	public static UnlockedCharacterCache Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<UnlockedCharacterCache>();
		}
	}

	public IEnumerable<string> OrderedCharacterUnlocks
	{
		get
		{
			return _orderedUnlockList;
		}
	}

	protected override void AwakeOnce()
	{
		Load();
	}

	private void OnEnable()
	{
	}

	private void OnDisable()
	{
	}

	private void HandleSecureStorageStorageChanged(object sender, EventArgs e)
	{
		Load();
	}

	public int? GetAmountUserSpentToUnlock(CharacterData data)
	{
		KeyValuePair<int, CharacterUserData.ToyLink> value;
		if (_unlockedCharacters.TryGetValue(data.charName, out value))
		{
			return value.Key;
		}
		return null;
	}

	public CharacterUserData.ToyLink GetToyLinkFlags(CharacterData data)
	{
		KeyValuePair<int, CharacterUserData.ToyLink> value;
		if (_unlockedCharacters.TryGetValue(data.charName, out value))
		{
			return value.Value;
		}
		return CharacterUserData.ToyLink.None;
	}

	public void ResetToyLinkFlags(CharacterData data)
	{
		KeyValuePair<int, CharacterUserData.ToyLink> value;
		if (_unlockedCharacters.TryGetValue(data.charName, out value))
		{
			_unlockedCharacters[data.charName] = new KeyValuePair<int, CharacterUserData.ToyLink>(value.Key, CharacterUserData.ToyLink.None);
		}
	}

	public void Unlock(CharacterData data, int gemsSpentOnUnlock, CharacterUserData.ToyLink toyLinkFlags)
	{
		if (!_unlockedCharacters.ContainsKey(data.charName))
		{
			_orderedUnlockList.Add(data.charName);
		}
		_unlockedCharacters[data.charName] = new KeyValuePair<int, CharacterUserData.ToyLink>(gemsSpentOnUnlock, toyLinkFlags);
		Save();
	}

	public void Load()
	{
		_unlockedCharacters.Clear();
		_orderedUnlockList.Clear();
		string empty = string.Empty;
		if (empty == null)
		{
			return;
		}
		string[] array = empty.Split(',');
		foreach (string text in array)
		{
			string[] array2 = text.Split('|');
			string text2 = array2[0];
			int num = 0;
			if (array2.Length > 1)
			{
				num = int.Parse(array2[1]);
			}
			CharacterUserData.ToyLink value = CharacterUserData.ToyLink.None;
			if (array2.Length > 2)
			{
				value = (CharacterUserData.ToyLink)int.Parse(array2[2]);
			}
			else if (num == -1)
			{
				value = CharacterUserData.ToyLink.Skylanders2011;
			}
			_unlockedCharacters.Add(text2, new KeyValuePair<int, CharacterUserData.ToyLink>(num, value));
			_orderedUnlockList.Add(text2);
		}
	}

	private void Save()
	{
	}
}
