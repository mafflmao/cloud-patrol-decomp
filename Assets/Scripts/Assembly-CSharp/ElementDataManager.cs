using System.Collections.Generic;

public class ElementDataManager : SingletonMonoBehaviour
{
	public CharacterDataList characterDataList;

	public ElementData[] elementDataList;

	private Dictionary<CharacterData, CharacterUserData> _charUserDataDict;

	private Dictionary<Elements.Type, ElementData> _elemDataDict;

	private Dictionary<Elements.Type, ElementUserData> _elemUserDataDict;

	public static ElementDataManager Instance
	{
		get
		{
			return SingletonMonoBehaviour.GetAutoGeneratedSingletonInstance<ElementDataManager>();
		}
	}

	public CharacterUserData GetCharacterUserData(CharacterData cd)
	{
		if (_charUserDataDict == null)
		{
			_charUserDataDict = new Dictionary<CharacterData, CharacterUserData>();
		}
		if (!_charUserDataDict.ContainsKey(cd))
		{
			CharacterUserData value = new CharacterUserData(cd);
			_charUserDataDict.Add(cd, value);
		}
		return _charUserDataDict[cd];
	}

	public ElementData GetElementData(Elements.Type type)
	{
		if (_elemDataDict == null)
		{
			_elemDataDict = new Dictionary<Elements.Type, ElementData>();
			ElementData[] array = elementDataList;
			foreach (ElementData elementData in array)
			{
				_elemDataDict.Add(elementData.elementType, elementData);
			}
		}
		return _elemDataDict[type];
	}

	public ElementUserData GetElementUserData(Elements.Type type)
	{
		if (_elemUserDataDict == null)
		{
			_elemUserDataDict = new Dictionary<Elements.Type, ElementUserData>();
		}
		if (!_elemUserDataDict.ContainsKey(type))
		{
			ElementUserData value = new ElementUserData(GetElementData(type));
			_elemUserDataDict.Add(type, value);
		}
		return _elemUserDataDict[type];
	}

	public bool HasUnlockedCharacters()
	{
		if (_charUserDataDict == null)
		{
			return false;
		}
		if (_charUserDataDict.Count == 0)
		{
			return false;
		}
		foreach (CharacterUserData value in _charUserDataDict.Values)
		{
			if (value.IsUnlocked)
			{
				return true;
			}
		}
		return false;
	}

	public IEnumerable<CharacterData> GetUnlockedCharacterListByElement(Elements.Type type)
	{
		List<CharacterData> list = new List<CharacterData>();
		IEnumerable<CharacterData> characterListByElement = characterDataList.GetCharacterListByElement(type);
		foreach (CharacterData item in characterListByElement)
		{
			if (GetCharacterUserData(item).IsUnlocked)
			{
				list.Add(item);
			}
		}
		return list;
	}

	public CharacterData GetSkylandersOnSale()
	{
		if (characterDataList != null)
		{
			CharacterData[] allReleasedSkylanders = characterDataList.GetAllReleasedSkylanders();
			int num = 0;
			if (num < allReleasedSkylanders.Length)
			{
				return allReleasedSkylanders[num];
			}
		}
		return null;
	}
}
